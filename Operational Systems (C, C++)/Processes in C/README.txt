Create a forkpipe program in C, C++, or Rust that:

Creates two processes (children) by calling the fork function. Below we will call the first created process GEN, the second NSD. The original (main) process will be referred to as MAIN. (ATTENTION, it depends on the order of creation of offspring).

It connects these children with a pipe (pipe and dup2 functions) so that the standard output of GEN is connected to the standard input of NSD.

It then waits for 5 seconds by calling sleep(5).

It then sends a SIGTERM signal to the GEN process, which causes both children to terminate.

If any of the children ended up with an error (return code != 0), it writes the line “ERROR” to the standard output and ends with a return code of 1, otherwise it writes the same line “OK” and ends with the code 0.

If any system call returns an error, the current process immediately exits with a return code of 2.

GEN will print lines containing two space-separated random numbers generated by the rand() function (eg printf(“%d %d\n”, rand(), rand())) to standard output.

GEN will respond to the SIGTERM signal. When this signal is sent, GEN prints the line “GEN TERMINATED” to standard error output and exits with a return code of 0.

NSD calls the execl function after creation to start executing the nsd program (see below). No other process should call execl.


Original task description can be found here:
https://osy.pages.fel.cvut.cz/docs/cviceni/lab4/


